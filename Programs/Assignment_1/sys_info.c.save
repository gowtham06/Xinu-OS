/*Using System Calls Fork() and Execl() and Make file*/

/*HEADER FILES*/

#include<stdio.h>
#include<unistd.h> //for pid_t data type
#include<string.h>
#include<stdlib.h>


int main(int argc, char *argv[])
{

if( argc > 2 )
{
printf("\nToo many arguments\n");
return -1;
}
else if( argc < 2)
{
printf("\n Less arguments than required\n");
return -1;
}

pid_t pid;
int fd[2]; //file descriptor to simulate one way communication of process thro
           //pipe
int len,size;
char string1[100];

pid = fork(); //fork returns value of type pid_t

if (pid < 0) /*Fork returns -ve value so fork has failed*/
{
		printf("Process creation failed at 1st fork\n");
		return -1;
}
else if(pid == 0) /*Fork returns zero indicating it is in child process*/ 
{
                printf("\n Child PID:%d\n",getpid());
                close(fd[1]); //close writing side
                read(fd[0],string1,sizeof(string1));
	        printf(" %s string1 : ",string1);
                string1[len] = 0;  
		if (strcmp(string1,"date") == 0)
		execl("/bin/date", "date", 0, 0);
		else if (strcmp(string1,"uname") == 0)
		execl("/bin/uname","uname",0,0);
		else if	(strcmp(string1,"hostname") == 0)
		execl("/bin/hostname","hostname",0,0);
		else if	(strcmp(string1,"echo") == 0)
		execl("/bin/echo","echo","Hello World!",0);
                close(fd[0]);
}
else /*parent process*/
{
		printf("\n Parent PID : %d\n",getpid());
                close(fd[0]); //close read side
               //write takes 3 args.File descriptor,data to be written 
	       //and length of data
	        size = sizeof(argv[1]);
		write(fd[1],argv[1],size);                
             
}

return 0;
}
